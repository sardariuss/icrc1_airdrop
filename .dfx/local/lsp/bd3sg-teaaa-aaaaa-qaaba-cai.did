type Airdrop = service {
  airdropSelf : () -> (AirdropResult);
  airdropUser : (principal) -> (AirdropResult);
  allowSelfAirdrop : (bool) -> (Result);
  getAmountPerUser : () -> (nat) query;
  getController : () -> (principal) query;
  getRemainingSupply : () -> (Balance);
  isSelfAirdropAllowed : () -> (bool) query;
  setAmountPerUser : (nat) -> (Result);
  setController : (principal) -> (Result);
};
type AirdropError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : Balance__1 };
  Duplicate : record { duplicate_of : TxIndex };
  AirdropOver;
  NotAuthorized;
  BadFee : record { expected_fee : Balance__1 };
  CreatedInFuture : record { ledger_time : Timestamp };
  AlreadySupplied;
  TooOld;
  InsufficientFunds : record { balance : Balance__1 };
};
type AirdropResult = variant { ok : TxIndex__1; err : AirdropError };
type AuthorizationError = variant { NotAuthorized };
type Balance = nat;
type Balance__1 = nat;
type Result = variant { ok; err : AuthorizationError };
type Timestamp = nat64;
type TxIndex = nat;
type TxIndex__1 = nat;
service : Airdrop